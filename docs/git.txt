There are many ways to collaborate using git or in our case github
(skip to the last one if you don't care about the others)

1) direct clone the master (currently peter's) and push back into
   it.  This is dangerous, needs special permission from the owner
   but is a very simple

	git clone https://github.com/teuben/pyASC
	cd pyASC
	edit f1
        git commit f1
        git push

   This is the typical work if you work on your own repo.

2) A variation on this theme is using a branch, so they could be more safely
   merged into the master. So, instead of editing 'f1' in the master, we
   create a branch and make changes on that:


   	git branch b1
	git checkout b1
	edit f1
	git commit f1
	git push                   # skip this if you want it only local

   When it comes time to merge, the following sequence can be followed

   	git checkout master        # start from a fresh master
	git pull
	git merge b1               # merge in the b1 changes, watch for conflicts
	git push                   # push this back to github


3) fork the master in your own GITHUB workspace, clone from that to your laptop,
   work on a branch, and go a pull request on GITHUB from that branch, viz.
   (below your name on GITHUB is "gh_name")

   	1) go on GITHUB and fork my repo to your space
	   (see the fork button top right)
	   
	   https://github.com/teuben/pyASC


	2) now on your laptop get your own version (as "gh_name") where you edit
	   on the branch

	   git clone https://github.com/gh_name/pyASC
	   cd pyASC
	   git branch b1
	   git checkout b1 
	   git branch               # shows you all branch names
	   git branch -r            # shows all branches on remote
	   edit f1
	   git status
	   git commit f1
	   git push -u origin b1    # push it back to your GITHUB


	3) now go back to your GITHUB.COM space, and pick your "b1" branch,
	   and issue a PULL REQUEST
	   Wait for an email when this was merged by the coordinater (Peter for now)
	   When this is done, your b1 branch was merged into the master

        4) Fetch the new master now from the original provider, which we'll label as "upstream"

	   git remote                                                   # see which ones you have
	   git remote add upstream https://github.com/teuben/pyASC      # add this if you don't have it

	   git checkout master                                          # make sure you're on your master
	   git fetch upstream                                           # fetch it
	   git merge upstream/master                                    # merge in 
	   git status                                                   # there should be no new things
	   git push                                                     # push it to your origin


         5) If you really don't care about that branch "b1" anymore, it can be deleted.

	    git checkout master
	    git branch -D b1
	    git push origin --delete b1


<< NOT DONE YET : also reviewing http://docs.astropy.org/en/stable/development/workflow/development_workflow.html
<<                to see if they have a different view on the workflow  
